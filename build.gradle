plugins {
    id 'test-report-aggregation'
    id 'jacoco-report-aggregation'
    id 'name.remal.sonarlint' version '3.0.8'
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'name.remal.sonarlint'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    }

    test {
        useJUnitPlatform()
    }

    sonarLint {
        isGeneratedCodeIgnored = false

        rules {
//            enable(
//                    'java:S100', // Enable `java:S100` rule (that is disabled by default)
//                    'java:S101', // Enable `java:S101` rule (that is disabled by default)
//            )

            disable(
                    'java:S106',  // System.out rule: the sub projects print to stdout because it is required
                    'java:S1220', // no need for named packages in this project
                    'java:S1118', // same for private constructors
                    'java:S5786', // let the test cases have the public modifier
            )

//            rule('java:S100') {
//                property('format', '^[a-z][a-zA-Z0-9]*$') // Configure `format` property for `java:S100` rule
//                properties = ['format': '^[a-z][a-zA-Z0-9]*$'] // `properties` - a mutable map of rule properties
//            }
        }
    }
}

dependencies {
    subprojects.findAll { it.pluginManager.hasPlugin('java') }.forEach {
        testReportAggregation it
    }

    subprojects.findAll { it.pluginManager.hasPlugin('jacoco') }.forEach {
        jacocoAggregation it
    }
}

reporting {
    reports {
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }

        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}
